#!/bin/ksh

if [ `uname` = "Linux" ]; then
    ECHO="echo -e" 
else
    ECHO="echo " 
fi

EGREP="egrep"

CMD_LINE="$0 $*"
CMD_TIME=`date`


help(){
cat  << EOF
########################################################################
# Author      : jigc@cmsz.com
# Script Name : get-month-check-table
# Description : 月全量检查报表脚本
# Version     : V3.0
# Usage       : get-month-check-table [-m 201509] [--threshold 90] [--force pattern]

         -m 指定要检查的月份，格式如 -m 201509 (如果不指定默认月份为本月)
         
         --threshold  设置结果通过率阀值，默认为配置文件 threshold 所配置的值
             
         --force <pattern>  强制标记通过 pattern 所匹配的业务线，标记为F. pattern匹配使用正则格式
             example:
                --force "0022.*"  匹配并标记0022整条业务线
                --force "0022.*|0082.*"  匹配并标记0022和0082整条业务线

输出标记字段说明:

结果字段标志:
    |标志位|业务代码+省代码|通过率百分比|A(L)文件|B(R)文件|C文件|结果生成时间|比对规则|重跑标记|结果标志字段|
    
    标志位：[%-]
        标志位总共4位：
        第一位：
            '%': 三方文件到齐 
            '-': 三方文件未到齐
        第二位: 
            '%': 三方文件到齐并得出比对结果
            '-': 三方文件到齐但未得出比对结果
        第三位: 
            '%': 通过对比结果校验(对比结果进行校验，主要通过记录数和文件后缀名进行校验)
            '-': 未通过对比结果校验
        第四位: 
            '%': 对比结果通过预设阀值 
            '-': 对比结果未通过预设阀值
        第五位: 
            '%': 结果生成时间晚于最后一个文件到达时间 
            '-': 结果生成时间早于最后一个文件到达时间(有新文件未处理)
    
    A(L)文件|B(R)文件|C文件:
        此字段仅显示文件状态。
        'AAA','BBB','CCC', 'LLL', 'RRR' : 用于标记比对结果中使用的文件
        '-A-','-B-','-C-', '-L-', '-R-' : 用于标记三方文件未到齐对已到文件进行预标记
        '---' : 用于标记文件当月文件未入到 INCOMING 表
        注意: 如果是双方比对，第三个字段为 '---'
    
    重跑标记:
        '-': 不建议重跑
        'R': 建议重跑
        
    结果标志字段:
        双方: 'M2'
        三方: 'M3'
        
文件详情：
    标志位1|标志位2|状态位业务代码+省代码|文件名|状态值|文件大小|校验值|文件创建时间|文件标志字段|
    标志位1：
        ' ': 无特殊标志
        'E': 结果校验错误(Error)
        'U': 一般用在三方文件未到齐，预标出三方文件(Unmatch)
        'R': 用于结果为通过预设值，标记出需要重跑的文件 (Redo)
        'N': 用于标记新来的文件，未跑出结果的文件 (New)
        'F': 强制重跑标记， 匹配 --force <pattern> 参数指定的业务线将带有该标记
        
    
    状态位2:
        格式： xxx
        'AAA','BBB','CCC', 'LLL', 'RRR' : 用于标记比对结果中使用的文件
        ' A ',' B ',' C ', ' L ', ' R ' : 用于标记三方文件未到齐对已到文件进行预标记
        ' - '  : 用于状态正常，但并非用在生成比对结果的文件
        ' ！': 用于标记异常文件(校验错误) 
        ' + ': 用于标记新来的文件，未跑出结果的文件
        
    状态值：
        1.上传成功
        2.上传失败
        3.文件校验成功
        4.文件校验失败
        5.记录校验成功
        6.记录校验失败
        7.比对

    文件标志字段:
        'MI':  Month Incoming 的首字母缩写

# Log         :
#  2015.09.15   V1.0: 实现基本功能 
#  2015.09.17   V2.0: 添加对结果进行校验，提前判断结果的有效性
#  2015.09.21   V2.1: 完善帮助信息，添加对 状态1的文件进行处理
#  2015.09.22   V3.0: 添加对双(三)方是否匹配，和匹配成功但未跑出结果做区分
#


* 输出示例 1. 双对比结果成功 :
|%%%%%|0013311|100.00%|LLL|RRR|---|2015-09-20 22:56:48|FLAT_0013+BOSS_0013|-|M2|
         |LLL|0013311|FLAT_20150915010000_0013311.0000734698.gz|7|   10.03(M)|  3320223840|2015-09-16 18:15:38|MI|
         |RRR|0013311|BOSS_20150915010000_0013311.0000728743.gz|7|   11.27(M)|  2058096031|2015-09-16 19:25:50|MI|

* 输出示例 2. 三对比结果成功，但是有新文件的，标记为 'N' 提示有文件:
|%%%%-|0045250|100.00%|AAA|BBB|CCC|2015-08-19 16:08:52|FLAT_0045+BOSS_0045+FLAT_9045|-|M3|
         |AAA|0045250|FLAT_20150815010000_0045250.0000117041.gz|7|    1.69(M)|  1071685366|2015-08-17 09:31:07|MI|
         |BBB|0045250|BOSS_20150815010000_0045250.0000072103.gz|7|    1.01(M)|  3686189429|2015-08-17 12:49:30|MI|
         |CCC|0045250|FLAT_20150815010000_9045250.0000117041.gz|7|    1.69(M)|  3083208664|2015-08-16 15:13:11|MI|
         | ! |0045250|FLAT_20150815010000_9045250.0000117041.gz|4|    0.00(M)|  4294967295|2015-08-16 14:53:10|MI|
        N| + |0045250|FLAT_20150815010000_9045250.0000117041.gz|3|    1.53(M)|  1792432859|2015-08-20 16:53:09|MI|
        
* 输出示例 3. 三对比结果成功，但是比对率未达标， 'R' 标志提示重跑 :
|%%%-%|0005791| 89.53%|AAA|BBB|CCC|2015-08-26 09:20:05|FLAT_0005+BOSS_0005+VGOP_0005|R|M3|
         |AAA|0005791|FLAT_20150815010000_0005791.0001283657.gz|7|   16.98(M)|  3902431423|2015-08-15 20:21:50|MI|
        R|BBB|0005791|BOSS_20150815010000_0005791.0001274005.gz|7|   13.43(M)|  3111121713|2015-08-17 12:01:05|MI|
         |CCC|0005791|VGOP_20150815010000_0005791.0001152971.gz|7|    5.36(M)|  1587060879|2015-08-21 13:26:05|MI|
         | ! |0005791|VGOP_20150816010000_0005791.0001152971.gz|4|    5.36(M)|  1587060879|2015-08-17 13:52:35|MI|
         
* 输出示例 4.输出结果未通过校验，标记为 'E' 提示建议重跑:
|%%--%|0082200|  0.00%|AAA|BBB|CCC|2015-09-10 17:42:52|FLAT_0082+BOSS_0082+MISC_0082|R|M3|
         |AAA|0082200|FLAT_20150815010000_0082200.0000050915.gz|7|    0.64(M)|    58978325|2015-08-21 10:31:25|MI|
        E|BBB|0082200|BOSS_20150815010000_0082200.0000050699.gz|7|    0.72(M)|  2076084496|2015-08-17 12:33:08|MI|
         |CCC|0082200|MISC_20150815010000_0082200.0000050774.gz|7|    0.74(M)|  3360117940|2015-08-18 16:03:21|MI|
         
* 输出示例 5.双方文件未到齐 (少了R方):      
|----%|0017451|  0.00%|-L-|---|---|2000-01-01 00:00:00|FLAT_0017+BOSS_0017|R|M2|
         | L |0017451|FLAT_20150915010000_0017451.0003256407.gz|3|   36.34(M)|  2066513979|2015-09-16 17:57:05|MI|
         
* 输出示例 6.三方文件未到齐(少了B方) :      
|----%|0045451|  0.00%|-A-|---|-C-|2000-01-01 00:00:00|FLAT_0045+BOSS_0045+FLAT_9045|R|M3|
         | A |0045451|FLAT_20150915010000_0045451.0000031097.gz|3|    0.42(M)|   128178610|2015-09-15 14:49:09|MI|
         | C |0045451|FLAT_20150915010000_9045451.0000031097.gz|3|    0.38(M)|    31610830|2015-09-15 15:53:28|MI|

* 输出示例 7. 各方文件到齐但是未得出比较结果 :  
|%---%|0075451|  0.00%|-A-|-B-|-C-|2000-01-01 00:00:00|FLAT_0075+BOSS_0075+MISC_0075|-|M3|
         | A |0075451|FLAT_20150915010000_0075451.0000409037.gz|3|    4.85(M)|  4153589998|2015-09-15 18:31:04|MI|
         | C |0075451|MISC_20150915010000_0075451.0000409420.gz|3|    5.56(M)|  1755099383|2015-09-17 15:43:47|MI|
         | B |0075451|BOSS_20150915010000_0075451.0000388695.gz|3|    5.78(M)|  4148084378|2015-09-21 17:25:28|MI|
#######################################################################
EOF

}
# 测试用
# | egrep --color "(^\||#[ABC -]#)0022951" 



#获取参数##########################
# ARGS=`getopt -a -o m:h -l raw-output:raw-input:force:help -- "$@"`
#[ $? -ne 0 ] && usage
#set -- "${ARGS}"
# eval set -- "${ARGS}"
# while true
while [ $# -gt 0 ]; 
do
    case "$1" in
    -m)
        MONTH="$2"
        shift
        ;;
        
    # --raw-output)
        # RAW_OUTPUT_FILE="$2"
        # shift
        # ;;
        
    --raw-input)
        IGNORE_MONTH="YES";
        RAW_INPUT_FILE="$2"
        
        [ ! -f "${RAW_INPUT_FILE}" ] && $ECHO  "[ERROR]        输入文件[ ${RAW_INPUT_FILE} ]不存在 ..." &&  exit
        file_name=`basename ${RAW_INPUT_FILE}`;
        # month_raw_output_201509.20150914154719"
        # echo month_raw_output_201509.20150914154719  | sed -e 's/.*_\([0-9]*\)\..*/\1/p'
        RAW_INPUT_FILE_MONTH=`echo ${file_name}  | sed -e 's/.*_\([0-9]*\)\..*/\1/p'`
        
        shift
        ;;
    --redo-output)
        REDO_OUTPUT_FILE="$2"
        shift
        ;;
    --force)
        FORCE_PATTERN="^$2$"
        shift
        ;;
    --threshold)
        THRESHOLD="$2"
        shift
        ;;
    -h|--help)
        help
        exit
        ;;
        
    --)
        break;
        ;;
    esac
shift
done
###################################

getRawResult3Table(){
    _month=$1;
    $ECHO  "[MESSAGE]    查询 ${_month} 的月全量三方结果 MONTH_THREE_FILE_COMPARE 表 ..." 
sqlplus -S /nolog <<EOF >> $OUTPUT_DIR/${RAW_OUTPUT_FILE}.sqlout
connect ${dbuser}/${dbpwd}@${dbsid}
set feedback off
set heading off
set linesize 1000
set pages 0
set termout off
set null NULL
SELECT 
FCV.BIZ_CODE || FCV.PROVINCE_CODE BIZ_PRIVINCE_CODE,
RET.A_FILE_NAME, RET.B_FILE_NAME, RET.C_FILE_NAME, FCV.COMPARE_TYPE,
TO_CHAR(RET.CREATE_TIME, 'YYYY-MM-DD#HH24:MI:SS'), RET.COMFORM_RATIO,
RET.N1, RET.N2, RET.N3, RET.N4, RET.N5, RET.N6, RET.N7, 
RET.A_REPEAT_RECORD, RET.B_REPEAT_RECORD, RET.C_REPEAT_RECORD,
RET.A_RECORD_TOTAL, RET.B_RECORD_TOTAL, RET.C_RECORD_TOTAL,'RESULT3'
FROM FULL_CONFIG_VIEW FCV LEFT  JOIN MONTH_THREE_FILE_COMPARE RET ON (FCV.BIZ_CODE || FCV.PROVINCE_CODE) = (RET.BIZ_CODE || RET.PROVINCE_CODE)   AND  RET.STTL_DT = '${_month}'
WHERE COMPARE_WAY = 3  -- and FCV.BIZ_CODE  || FCV.PROVINCE_CODE like '0082%'
ORDER BY FCV.BIZ_CODE || FCV.PROVINCE_CODE
/
EOF
}

getRawResult2Table(){
    _month=$1;
    $ECHO  "[MESSAGE]    查询 ${_month} 的月全量双方结果 MONTH_TWO_FILE_COMPARE 表 ..." 
sqlplus -S /nolog <<EOF >> $OUTPUT_DIR/${RAW_OUTPUT_FILE}.sqlout
connect ${dbuser}/${dbpwd}@${dbsid}
set feedback off
set heading off
set linesize 1000
set pages 0
set termout off
set null NULL
SELECT 
FCV.BIZ_CODE || FCV.PROVINCE_CODE BIZ_PRIVINCE_CODE,
RET.LEFT_FILE_NAME, RET.RIGHT_FILE_NAME, FCV.COMPARE_TYPE,
TO_CHAR(RET.CREATE_TIME, 'YYYY-MM-DD#HH24:MI:SS'), RET.COMFORM_RATIO,
RET.LEFT_UNMATCH, RET.RIGHT_UNMATCH,
RET.LEFT_FILTER_RECORD, RET.RIGHT_FILTER_RECORD, 
RET.LEFT_RECORD, RET.RIGHT_RECORD,'RESULT2'
FROM FULL_CONFIG_VIEW FCV LEFT  JOIN MONTH_TWO_FILE_COMPARE RET ON (FCV.BIZ_CODE || FCV.PROVINCE_CODE) = (RET.BIZ_CODE || RET.PROVINCE_CODE)   AND  RET.STTL_DT = '${_month}'
WHERE COMPARE_WAY = 2  --  and FCV.BIZ_CODE  || FCV.PROVINCE_CODE like '0023%'
ORDER BY FCV.BIZ_CODE || FCV.PROVINCE_CODE
/
EOF
}


getMonthIncomingTable(){ 
    _month=$1;
    $ECHO  "[MESSAGE]    查询 ${_month} 的月全量 MONTH_INCOMING 表 ..." 
sqlplus -S /nolog <<EOF  >> $OUTPUT_DIR/${RAW_OUTPUT_FILE}.sqlout
connect ${dbuser}/${dbpwd}@${dbsid}
set feedback off
set heading off
set linesize 1000
set null NULL
set pages 0
SELECT
BIZ_CODE || PROVINCE_CODE BIZ_PRIVINCE_CODE,
FILE_NAME, FILE_SIZE, CKSUM_VALUE, STATE, 
RESEND_NUM, VALIDITY, TO_CHAR(INCOMING_TIME, 'YYYY-MM-DD#HH24:MI:SS'), 'MONTH_INCOMING'
FROM MONTH_INCOMING 
WHERE STTL_DT='${_month}' -- and BIZ_CODE || PROVINCE_CODE like '0082%'
ORDER BY INCOMING_TIME
/
EOF
}

headDump(){
    $ECHO "################################################################################"
    $ECHO "# 月份             : $MONTH"
    $ECHO "# 命令行           : $CMD_LINE"
    $ECHO "# 比对阀值         ：$THRESHOLD %"
    $ECHO "# 原始结果导入文件 : $RAW_INPUT_FILE"
    $ECHO "# 原始结果输出文件 : $OUTPUT_DIR/$RAW_OUTPUT_FILE"
    $ECHO "# 异常结果标记文件 : $OUTPUT_DIR/$REDO_OUTPUT_FILE"
    $ECHO "# 强制标记匹配字段 : $FORCE_PATTERN"
    $ECHO "# 配置文件路径     : $conf_file"
    $ECHO "# 命令执行时间     : $CMD_TIME"
    $ECHO "################################################################################"
    $ECHO
}

# 初始化函数
init ()
{
     . cfConfigFile.sh
    if [ -f $HOME/conf/get-month-check-table.conf ];then 
        conf_file=$HOME/conf/get-month-check-table.conf
    else
        conf_file=$DQAS_HOME/conf/get-month-check-table.conf
        if [ ! -f ${conf_file} ];then
            echo "conf file [${conf_file}] not exist,exit!"
            exit 1
        fi
    fi
    
    if [ -f $HOME/bin/merge-result-incoiming-table.awk ];then
        MEARGE_RESULT_IMCOMING_TABLE_AWK=$HOME/bin/merge-result-incoiming-table.awk
    else
        MEARGE_RESULT_IMCOMING_TABLE_AWK=$DQAS_HOME/bin/merge-result-incoiming-table.awk
        if [ ! -f ${MEARGE_RESULT_IMCOMING_TABLE_AWK} ];then
            echo "MEARGE_RESULT_IMCOMING_TABLE_AWK file [${MEARGE_RESULT_IMCOMING_TABLE_AWK}] not exist,exit!"
            exit 1
        fi
    fi
   
     if [ -f $HOME/bin/suggest-redo-list.awk ];then
        SUGGEST_REDO_LIST_AWK=$HOME/bin/suggest-redo-list.awk
     else
        SUGGEST_REDO_LIST_AWK=$DQAS_HOME/bin/suggest-redo-list.awk
        if [ ! -f ${SUGGEST_REDO_LIST_AWK} ];then
            echo "SUGGEST_REDO_LIST_AWK file [${SUGGEST_REDO_LIST_AWK}] not exist,exit!"
            exit 1
        fi
     fi
  
    
    cfInit ${conf_file} noLock readOnly
    dbsid=$(cfGetConfigItem common dbsid)
    dbuser=$(cfGetConfigItem common dbuser)
    dbpwd=$(cfGetConfigItem common dbpasswd)
    # dbpwd=`getdbpwd ${dbuser}`
    
    OUTPUT_DIR=$(cfGetConfigItem common outputdir)
    THRESHOLD=${THRESHOLD:=`cfGetConfigItem common threshold`};

    [ -z "${OUTPUT_DIR}" ] && OUTPUT_DIR="./output/"

    headDump

    [ ! -d ${OUTPUT_DIR} ] && mkdir -p ${OUTPUT_DIR}
    
    # rm ${OUTPUT_DIR}/month*
    
    > $OUTPUT_DIR/${RAW_OUTPUT_FILE}.sqlout
    if [ ${RAW_INPUT_FILE} == "__DB__" ]; then
        $ECHO  "[MESSAGE]    查询数据库 ..."
        {
            getRawResult2Table ${MONTH}
            getRawResult3Table ${MONTH}
            getMonthIncomingTable ${MONTH}
        } 
        
        $ECHO  "[MESSAGE]    开始合并从数据库查询到的数据 ..."
        
        headDump > $OUTPUT_DIR/${RAW_OUTPUT_FILE}
        awk -f $MEARGE_RESULT_IMCOMING_TABLE_AWK COMPARE_RATDO_THRESHOLD=$THRESHOLD $OUTPUT_DIR/${RAW_OUTPUT_FILE}.sqlout >>  $OUTPUT_DIR/${RAW_OUTPUT_FILE}
        
        # rm $OUTPUT_DIR/${RAW_OUTPUT_FILE}.sql;
        if [ $? -ne 0 ]; then
            $ECHO  "[ERROR]    解析数据库结果出错 ..."
            exit 1
        fi
        
        $ECHO  "[MESSAGE]    开始统计分析合并结果 ..."
        headDump > $OUTPUT_DIR/${REDO_OUTPUT_FILE}
        awk -f $SUGGEST_REDO_LIST_AWK  FORCE_PATTERN=$FORCE_PATTERN  $OUTPUT_DIR/$RAW_OUTPUT_FILE   >> $OUTPUT_DIR/${REDO_OUTPUT_FILE}
        
        
    else
        headDump > $OUTPUT_DIR/${REDO_OUTPUT_FILE}
        
        awk -f $SUGGEST_REDO_LIST_AWK  FORCE_PATTERN=$FORCE_PATTERN  $OUTPUT_DIR/$RAW_INPUT_FILE   >> $OUTPUT_DIR/${REDO_OUTPUT_FILE}
        if [ $? -ne 0 ]; then
            $ECHO  "[ERROR]    解析 [ $RAW_INPUT_FILE ] 文件出错 ..."
            exit 1
        fi
    fi
    $ECHO "\n\n\n";
    sed -n -e '/  \*\*\*/,$p' $OUTPUT_DIR/${REDO_OUTPUT_FILE};
    
}




#main 入口#################################

IGNORE_MONTH=${IGNORE_MONTH:="NO"}; # 如果数据由文件导入而非数据库导入则，忽略月份
MONTH=${MONTH:=`date +%Y%m`};
CURRENT_TIME=`date +%Y%m%d%H%M%S`;
RAW_OUTPUT_FILE=${RAW_OUTPUT_FILE:="month_raw_output_${MONTH}.${CURRENT_TIME}"};
REDO_OUTPUT_FILE=${REDO_OUTPUT_FILE:="month_redo_output_${MONTH}.${CURRENT_TIME}"};
RAW_INPUT_FILE=${RAW_INPUT_FILE:="__DB__"};
FORCE_PATTERN=${FORCE_PATTERN:""};

if [ ${IGNORE_MONTH} == "YES" ];then
    MONTH=${RAW_INPUT_FILE_MONTH}
fi
[ ${#MONTH} -ne 6 ]  && $ECHO  "[ERROR]        输入月份 MONTH="${MONTH}" 格式错误! 正确格式如: '201509' ..." &&  exit


init

exit

if [ `whoami` = 'root' ];then
    MEARGE_RESULT_IMCOMING_TABLE_AWK=merge-result-incoiming-table.awk
    cat raw.txt | awk -f $MEARGE_RESULT_IMCOMING_TABLE_AWK
else
    init
fi

